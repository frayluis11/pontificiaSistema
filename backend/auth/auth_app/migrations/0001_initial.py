# Generated by Django 4.2.7 on 2025-10-02 22:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identificador único del usuario', primary_key=True, serialize=False)),
                ('dni', models.CharField(help_text='Documento Nacional de Identidad', max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='El DNI debe contener entre 7 y 10 dígitos numéricos', regex='^\\d{7,10}$')])),
                ('nombre', models.CharField(help_text='Nombre(s) del usuario', max_length=100)),
                ('apellido', models.CharField(help_text='Apellido(s) del usuario', max_length=100)),
                ('correo', models.EmailField(help_text='Correo electrónico único del usuario', max_length=254, unique=True)),
                ('rol', models.CharField(choices=[('ADMIN', 'Administrador'), ('DOCENTE', 'Docente'), ('RRHH', 'Recursos Humanos'), ('CONTABILIDAD', 'Contabilidad'), ('ESTUDIANTE', 'Estudiante')], default='ESTUDIANTE', help_text='Rol del usuario en el sistema', max_length=15)),
                ('estado', models.CharField(choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo'), ('SUSPENDIDO', 'Suspendido'), ('BLOQUEADO', 'Bloqueado')], default='ACTIVO', help_text='Estado actual del usuario', max_length=15)),
                ('fecha_creacion', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha y hora de creación del usuario')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última modificación')),
                ('fecha_ultimo_acceso', models.DateTimeField(blank=True, help_text='Fecha y hora del último acceso al sistema', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indica si el usuario está activo en el sistema')),
                ('is_staff', models.BooleanField(default=False, help_text='Indica si el usuario puede acceder al panel de administración')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'auth_usuarios',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='TokenBlacklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text='Token JWT que ha sido invalidado', max_length=500, unique=True)),
                ('fecha_invalidacion', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha y hora de invalidación del token')),
                ('razon', models.CharField(default='logout', help_text='Razón de la invalidación (logout, cambio_password, etc.)', max_length=100)),
                ('usuario', models.ForeignKey(help_text='Usuario al que pertenecía el token', on_delete=django.db.models.deletion.CASCADE, related_name='tokens_invalidados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token Invalidado',
                'verbose_name_plural': 'Tokens Invalidados',
                'db_table': 'auth_token_blacklist',
                'ordering': ['-fecha_invalidacion'],
                'indexes': [models.Index(fields=['token'], name='auth_token__token_5884f8_idx'), models.Index(fields=['usuario'], name='auth_token__usuario_971263_idx'), models.Index(fields=['fecha_invalidacion'], name='auth_token__fecha_i_4edff1_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['dni'], name='auth_usuari_dni_5526e0_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['correo'], name='auth_usuari_correo_fc00bd_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['rol'], name='auth_usuari_rol_f6db00_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['estado'], name='auth_usuari_estado_e12e84_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['fecha_creacion'], name='auth_usuari_fecha_c_1204d5_idx'),
        ),
    ]
