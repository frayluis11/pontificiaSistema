# Docker Compose override para producción
# Sistema Pontificia - Production Configuration

version: '3.8'

services:
  # ===============================================================================
  # PRODUCCIÓN OVERRIDES
  # ===============================================================================

  # Redis con autenticación
  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Base de datos con configuración optimizada
  db:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Gateway en producción
  gateway:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${GATEWAY_SECRET_KEY}
      - GATEWAY_ENABLE_PROXY=True
      - GATEWAY_ENABLE_JWT_VALIDATION=True
      - GATEWAY_ENABLE_RATE_LIMITING=True
      - CORS_ALLOW_ALL_ORIGINS=False
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 
                 --workers 3 
                 --timeout 30 
                 --keep-alive 5 
                 --max-requests 1000 
                 --preload 
                 gateway_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Microservicios con Gunicorn
  auth-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${AUTH_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3001 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 auth_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  users-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${USERS_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3002 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 profiles_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  attendance-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${ATTENDANCE_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3003 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 asistencia_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  payments-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${PAYMENTS_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3004 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 pagos_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  documents-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DOCUMENTS_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3005 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 documentos_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  reports-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${REPORTS_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3006 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 reportes_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  audit-service:
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${AUDIT_SECRET_KEY}
    command: >
      sh -c "
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:3007 
                 --workers 2 
                 --timeout 30 
                 --max-requests 1000 
                 auditoria_service.wsgi:application
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx para producción
  nginx:
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure

  # Remover Adminer en producción
  adminer:
    profiles:
      - disabled

# Configuración adicional para producción
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Aplicar logging a todos los servicios
x-logging-all: &logging-all
  logging: *default-logging